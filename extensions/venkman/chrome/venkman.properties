#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

# NOTE ON LEADING/TRAILING SPACES AND QUOTES...
# Strings in this file are stripped of leading and trailing qoutes, if they are
# present.  This allows you to express leading and trailing whitespace, which
# would otherwise be trimmed by the stringbundle code.  In order to express
# a leading or trailing quote, use two of them.
#
# For example...
#
# my.message1 = "          foo"
# my.message2 = "          foo
#  Both of these produce 10 spaces, followed by the word ``foo''.
# my.message3 = "foo          "
# my.message3 = foo          "
#  Both of these produce the word ``foo'', followed by 10 spaces.
# my.message4 = A sphincter says, "what?""
# my.message4 = "A sphincter says, "what?""
#  Both of these produce the phrase ``A sphincter says "what?"''
#

# character set to convert unicode messages to before writing them to a
# profile report, or generated help text.
msg.report.charset = utf-8
msg.locale.version = 0.9.88
msn.bad.locale     = "このバージョンの Venkman はロケール "%1$S" で動作するように作られていますが、現在ご利用のロケールは "%2$S" となっています。 問題が起きる可能性がありますので、デフォルトのロケールに変更するか言語パックをアップデートしてください。"

msg.release.url = http://www.mozilla.org/releases/

## exception descriptions ##
err.notimplemented = 実装されていません。
err.required.param = 必須パラメータ %1$S が不足しています。
err.invalid.param  = パラメータ %1$S の値(%2$S)が不正です。
# 1 url, 2 fileName, 3 lineNumber, 4 reason
err.subscript.load = <%1$S> からのサブスクリプト読み込みエラーです。
err.no.debugger    = JavaScript デバッガサービスがインストールされていません。恐らくこのアプリケーションは Venkman が必要とするコアサポート機能を無効化する --disable-jsd フラグ付きでビルドされています(about:buildconfig を参照してください)。このフラグを付けずに再コンパイルするか、開発元にこのフラグを外してビルドするよう求めてください。
err.failure        = 操作に失敗しました: %1$S
err.no.stack       = スタックがありません。

## error messages ##
msn.err.unknown.reason  = 原因不明。
msn.err.required.param  = 必須パラメータ %1$S が不足しています。
msn.err.invalid.param   = パラメータ %1$S の値(%2$S)が不正です。
msn.err.invalid.pref    = 環境設定 %1$S の値(%2$S)が不正です。  
msn.err.scriptload      = <%1$S> からのサブスクリプト読み込みエラーです。
msn.err.no.source       = ""%1$S" にマッチするスクリプトは読み込まれていません。"
msn.err.no.command      = ""%1$S" にマッチするコマンドはありません。"
msn.err.no.such.view    = ""%1$S" というビューはありません。"
# 0.9.73の時点ではビューIDはマッチ(前方一致)ではなく完全一致比較
msg.err.no.stack        = スタックがありません。
msg.err.no.eval.object  = 評価オブジェクトが選択されていません。
msn.err.noscript        = ""%1$S" にマッチするデバッグ可能なスクリプトはありません。"
msn.err.disabled        = "ごめんなさい、"%1$S" は現在無効化されています。"
msn.err.notimplemented  = "ごめんなさい、"%1$S" はまだ実装されていません。"
msn.err.ambigcommand    = "コマンドが一意に定まりません。 "%1$S" は %2$S個のコマンド [%3$S] にマッチします。"
msn.err.bp.noline       = <%1$S> にマッチし、%2$S行目に実行可能なコードを含むスクリプトはありません。
msn.err.bp.nodice       = <%1$S> の %2$S行目にはブレークポイントが設定されていません。
msn.err.startup         = 初期化中に例外が発生しました。バグの登録を(英語で)お願いします。\n%1$S
msn.err.cant.match      = ""%1$S" にマッチするテンプレートはありません。"
msg.err.internal.bpt    = ブレークポイント操作中に内部エラーが発生しました。
msn.err.internal.hook   = フック "%1$S" の処理中に内部エラーが発生しました。
msn.err.failure         = 操作に失敗しました: %1$S
msn.err.no.section      = "%1$S" を終端とするセクションが <%2$S> で見つかりません。
# .tpl は %1$S(@-header-end等)を終端記号としてセクション分割される
msn.err.no.template     = "%1$S" という名前のテンプレート用の環境設定がありません。
msn.err.not.a.dom.node  = 式 "%1$S" は DOM ノードではありません。
msn.err.internal.dispatch = コマンド "%1$S" ディスパッチ中に内部エラーが発生しました。
# 1: URL 2: ステータス
msn.err.source.load.failed = URL <%1$S> の読み込みエラー: %2$S
msn.err.no.such.container  = ""%1$S" にマッチするコンテナはありません。"
# これはマッチではなく一致かも？ 未確認
msg.err.condition.failed   = エラーのためブレークポイント条件の評価ができません。
msn.err.condition.security = セキュリティエラーのためブレークポイント条件の評価ができません: ``%1$S''
msg.err.format.not.available = このソースは要求されたフォーマット形式を利用できません。
# ソースをファイルに保存時する時の.js/.xmlなどのフォーマット形式...
msn.err.no.function     = <%2$S> の %1$S行目は実行可能な関数の範囲外です。
msn.jsdurl.errpage = <html><head><title>エラー</title></head><body>&lt;<b>%1$S</b>&gt; の読み込みエラーです。<br/>%2$S</body></html>
msg.err.jsdurl.parse     = URL 解析エラーです。
msg.err.jsdurl.nosource  = URL にはテキストソースがありません。
msg.err.jsdurl.noservice = そのようなサービスはありません。
msg.err.jsdurl.search    = 検索パターンエラーです。
msg.err.jsdurl.sourcetext = ソーステキスト位置エラーです。
msn.err.jsdurl.template  = ""%1$S" という名前のテンプレート読み込みエラーです。"
msn.err.meta.failed      = <%2$S> の %3$S行目のメタコメント (%1$S) の処理エラーです。
msg.err.this.not.object  = 式の結果がオブジェクトでなければなりません。
msn.err.unknown.pref     = ""%1$S" という名前の環境設定はありません。"
msn.err.eval.security    = セキュリティエラーのため式の評価ができません: ``%1$S''

## "values" ##
# 日本語化しない方が見やすい。
msg.val.unknown     = <unknown>
msg.val.console     = x-jsd:interactive-session
msg.val.na          = <not-available>
msg.val.none        = <none>
msg.val.object      = <object>
msg.val.expression  = <expression>
msg.val.proto       = [[Prototype]]
msg.val.parent      = [[Parent]]

## words ##
# まだ日本語化すべきものがあるかも知れないが...
msg.val.min         = min
msg.val.max         = max
msg.val.this        = this
msg.val.breakpoint  = ブレークポイント
msg.val.debug       = エラーハンドラ
msg.val.debugger    = デバッガキーワード
msg.val.throw       = 投げられた例外
msg.val.global      = global
msg.val.scope       = scope
msg.val.exception   = exception
msg.val.on          = オン
msg.val.off         = オフ
msg.val.tlscript    = __toplevel__
msg.val.toscript    = [TimeoutScript]
msg.val.ivscript    = [IntervalScript]
msg.val.evscript    = [EvalScript]
msg.url.native      = x-jsd:native-code

## types ##
# 日本語化しない方が見やすい。
msg.type.int        = integer
msg.type.boolean    = boolean
msg.type.double     = double
msg.type.function   = function
msg.type.null       = null
msg.type.object     = object
msg.type.string     = string
msg.type.unknown    = unknown
msg.type.void       = void

msg.class.xpcobj       = XPComponent
msg.class.const.xpcobj = const XPComponent
msg.class.native.fun   = Native Function
msg.class.script.fun   = Script Function

## messages ##
msg.query.close      = デバッグの途中ですが、終了しても宜しいですか？
msg.status.default   = JavaScript デバッガにようこそ。
msn.status.loading   = ""%1$S" のソースを読み込み中です。"
msn.status.marking   = ""%1$S" のソースをマークしています。"
msn.status.stopped   = %1$S, %2$S で停止しました。
msn.floater.title    = JSD: %1$S

msg.alert   = 警告
msg.prompt  = 問い合わせ
msg.confirm = 確認

msg.cant.pprint      = この関数は整形表示できません。

msg.slash.required   = "仕様が変更されました: 初期状態では、現在すべてのコマンドはスラッシュ文字('/')で始まります。 スラッシュで始まらないテキストはすべて eval コマンドに渡されます。 例えば step コマンドを実行するには "/step" と入力します。 1 + 1 を評価するには "1 + 1" と入力するだけです。 以前の動作の方が好みであれば、 "/pref sessionView.requiredSlash false" と入力してください。"

msg.commasp          = ", "
msn.eval.in          = %1$S: %2$S"
msn.stop             = %1$S で停止しました。
msn.cont             = %1$S から継続します。
msn.subscript.loaded = サブスクリプト <%1$S> が返り値 "%2$S" で読み込まれました。
# 1 exception name, 2 fileName, 3 lineNumber
msn.eval.error       = %1$S: <%2$S> %3$S行目
msn.eval.threw       = 例外を捉えました: %1$S
msg.hello            = "    JavaScripit デバッガ Venkman のご利用ありがとうございます。\n先ずは FAQ <http://skillup.jp/venkman/faq/venkman-faq.html> をお読みください。その他の情報は Venkman ホームページ <http://jt.mozilla.gr.jp/projects/venkman/> からどうぞ。\n日本語版に関しては Venkman-JP <http://skillup.jp/venkman/> をご覧ください。お気づきの点など Venkman-JP サポートフォーラム <http://skillup.jp/forum/> までご連絡頂ければ幸いです。;-)"
msn.version          = 現在ご利用の Venkman のバージョンは %1$S です。
msn.tip1.help        = ""%1$Shelp <command-name>" とすれば指定したコマンドのヘルプが表示されます。"
msg.tip2.help        = <x-jsd:help> で検索機能付きコマンドリファレンスがご利用になれます。
msg.tip3.help        = "コマンドはスラッシュ('/')で始めてください。 スラッシュで始まらない入力はすべて JavaScript として評価されます。 例えば step コマンドを実行するには "/step" と入力します。 1 + 1 を評価するには 1 + 1 とだけ入力してください。"
msg.no.breaks.set    = ブレークポイントは設定されていません。
msg.no.fbreaks.set   = 予定ブレークポイントは設定されていません。
msg.no.watches.set   = 監視点は設定されていません。
msn.no.properties    = %1$S にはプロパティがありません。
msn.no.cmdmatch      = ""%1$S" にマッチするコマンドはありません。"
msn.cmdmatch         = ""%1$S" にマッチするコマンドは [%2$S] です。"
msn.cmdmatch.all     = 実装されているコマンドは %1$S です。
# cmdmatchは単にカンマ区切りだが、cmdmatch.allのコマンド一覧は[]で囲まれた形に置き換えられる
msn.props.header     = デバッグ対象スコープでの %1$S のプロパティ:
msn.propsd.header    = デバッガスコープでの %1$S のプロパティ:
msn.bp.header        = %1$S個のブレークポイントを設定:
# 1 index, 2 file name, 3 line
msn.bp.line          = #%1$S <%2$S> %3$S行目
msn.bp.created       = <%1$S> の %2$S行目にブレークポイントを設定しました。
msn.bp.cleared       = <%1$S> の %2$S行目のブレークポイントを削除しました。
msn.bp.exists        = <%1$S> の %2$S行目にはすでにブレークポイントが設定されています。
msn.watch.header     = %1$S個の監視点が設定されています:
msn.enter.expression = ""%1$S" に設定する新しい値を入力してください:"

# 1 index, 2 file name, 3 line
msn.fbp.line         = #%1$S <%2$S> %3$S行目
msn.fbp.created      = <%1$S> の %2$S行目に予定ブレークポイントを設定しました。
msn.fbp.cleared      = <%1$S> の %2$S行目の予定ブレークポイントを削除しました。
msn.fbp.exists       = <%1$S> の %2$S行目にはすでに予定ブレークポイントが設定されています。
msn.source.line      = %1$S: %2$S
msg.emode.ignore     = エラーを無視します。
msg.emode.trace      = エラーを追跡します。
msg.emode.break      = エラーでデバッグ対象を停止します。
msg.tmode.ignore     = 例外を無視します。
msg.tmode.trace      = 例外を追跡します。
msg.tmode.break      = 例外でデバッグ対象を停止します。
msn.iasmode          = [起動時に初期化] は %1$S です。
msn.layout.list      = "以下のレイアウトがすでに保存されています [%1$S]。現在のレイアウトを保存するには "save-layout <name>"、特定のレイアウトに戻すには "restore-layout <name>" としてください。"
msn.chrome.filter    = [クロムフィルタリング] は %1$S です。
# 1 value, 2 frame
msn.exception.trace  = 例外 %1$S が %2$S から投げられました。
# 1 message, 2 flags, 3 file, 4 line, 5 pos
msn.erpt.error       = "エラー "%1$S" [%2$S] がファイル "%3$S" の %4$S行目、%5$S文字目で発生しました。"
msn.erpt.warn        = "警告 "%1$S" [%2$S] がファイル "%3$S" の %4$S行目、%5$S文字目で発生しました。"
msn.profile.lost     = スクリプト %1$S のプロファイルデータが失われました。
msn.profile.state    = [プロファイルデータ収集] は現在 %1$S です。
msn.profile.saved    = プロファイルデータを <%1$S> に保存しました。
msg.profile.cleared  = プロファイルデータを破棄しました。
msn.profile.saving   = プロファイルレポートを作成中... ファイル %1$S / %2$S
msg.open.file        = ファイルを開く
msg.save.file        = 名前を付けて保存
# ソース読み込み/設定保存に使われるが、今後他にも使われる可能性があるので一般的な表現のままにした
msg.open.url         = 読み込む URL を入力してください
msn.maxtabs.reached  = ソースビューの数が上限 (%1$S) に達しました。この上限を変更したい場合には "source2View.maxTabs" 設定を書き換えてください。ソースが既存のタブに読み込まれなくなります。
msg.maxtabs.alert    = 今後もこの警告を表示する
msg.save.profile     = 名前を付けてプロファイルデータを保存
msg.save.source      = 名前を付けてソースファイルを保存
msg.navigator.xul    = ナビゲータウィンドウ
msg.browser.xul      = ブラウザウィンドウ
msg.enter.watch      = 監視する式を入力してください

## property value flags ##
# 日本語化してたまるか。(^^;
msg.vf.enumerable = e
msg.vf.readonly   = r
msg.vf.permanent  = p
msg.vf.alias      = A
msg.vf.argument   = a
msg.vf.variable   = v
msg.vf.error      = E
msg.vf.exception  = X
msg.vf.hinted     = h

## formatting ##
# .jsファイル中で英語文字列と連結されるもの等もあり、日本語化すべきか微妙。(^^;

# 1: argument name, 2: value
msn.fmt.argument = %1$S=%2$S"
# 1: property flags, 2: property name, 3: property value
msn.fmt.property = [%1$S] %2$S = %3$S"
# 1: function name, 2: filename
# msn.fmt.script = function %1$S in <%2$S>
msn.fmt.script = 関数 %1$S ＠ <%2$S>
# 1: function name, 2: arguments, 3: filename, 4: line number
# msn.fmt.frame = function %1$S(%2$S) in <%3$S> line %4$S
msn.fmt.frame = 関数 %1$S(%2$S) ＠ <%3$S> %4$S行目
# 1: type, 2: class name, 3: value
# msn.fmt.value.long = [%1$S] [class: %2$S] %3$S"
msn.fmt.value.long = "[%1$S] [クラス: %2$S] %3$S"
# 1: type, 2: value
msn.fmt.value.med  = [%1$S] %2$S"
# 1: type, 2: value
msn.fmt.value.short = %1$S:%2$S"
# 1: property count
# msn.fmt.object = %1$S properties
msn.fmt.object = %1$S 個のプロパティ
# 1: ctor name, 2: property count
msn.fmt.object.value = {%1$S:%2$S}
# 1: JS exception name, 2: error text, 3: file name, 4: line number
# msn.fmt.jsexception = %1$S: %2$S @ <%3$S> %4$S"
msn.fmt.jsexception = "JS例外 %1$S: %2$S ＠ <%3$S> %4$S行目"
# 1: error number,  2: error text, 3: file name, 4: line number, 5: function name
# msn.fmt.badmojo = BadMojo %1$S: %2$S @ <%3$S> line %4$S (%5$S)
msn.fmt.badmojo = Venkman例外 %1$S: %2$S ＠ <%3$S> %4$S行目 (%5$S)
# 1: var number, 2: value
msn.fmt.tmp.assign = $[%1$S] = %2$S"
# 1: string length
# msn.fmt.longstr = %1$S characters
msn.fmt.longstr = %1$S 文字
# 1: command name 2: parameters
msn.fmt.usage = %1$S %2$S
# 1: function name
msn.fmt.guessedname = [%1$S]
# 1: program counter
# ブレークポイントビューで使用
msn.fmt.pc = [%1$S]
# 1: pref name 2: value
# msn.fmt.prefvalue = Preference ``%1$S'' is ``%2$S''
msn.fmt.prefvalue = "環境設定 "%1$S" の値は "%2$S" です。"
# 1: index, 2: label, 3: value
msn.fmt.watch.item = %1$S: %2$S = %3$S"
# 1: on|off
# msn.fmt.pprint = Pretty Print is %1$S.
msn.fmt.pprint = 整形表示は %1$S です。
# 1: frame number, 2: frame string
msn.fmt.frame.line = #%1$S: %2$S"
# 1: file name, 2: line number, 3: pc
# msn.fmt.frame.location = %1$S, line %2$S, pc %3$S
# スタックビューで使用
msn.fmt.frame.location = %1$S, %2$S行目, pc %3$S
# 1: function name, 2: start line, 3: end line, 4: call count, 5: recurse,
# 6: total, 7: min, 8: max, 9: avg
# プロファイルデータHTML保存で使用
# msn.fmt.profile.str = %1$S: %2$S-%3$S, %4$S call(s)%5$S, %6$Sms total, %7$Sms min, %8$Sms max, %9$Sms avg, excluding calls: %10$S
msn.fmt.profile.str = %1$S: %2$S-%3$S行目, 呼び出し %4$S 回%5$S, 合計 %6$Sms, 最短 %7$Sms, 最長 %8$Sms, 平均 %9$Sms, 関数呼び出しを除いて %10$Sms
msn.fmt.profile.str2 = 合計 %1$Sms, 最短 %2$Sms, 最長 %3$Sms, 平均 %4$Sms
# 1: max recurse depth
# msn.fmt.profile.recurse = " (max depth %1$S)
msn.fmt.profile.recurse = " (最大再帰 %1$S回)"

## menu headings ##
# For these menu labels, an accesskey may be specified using a .accesskey
# string, or by prefixing the desired letter with "&" in the label.
# The accesskey string should have the form: msg.mnu.<menuname>.accesskey
msg.mnu.file           = ファイル
#msg.mnu.file.accesskey = F
msg.mnu.edit           = 編集
#msg.mnu.edit.accesskey = E
msg.mnu.debug           = デバッグ
#msg.mnu.debug.accesskey = D
msg.mnu.profile           = プロファイル
#msg.mnu.profile.accesskey = P
msg.mnu.view            = 表示
#msg.mnu.view.accesskey  = V
msg.mnu.help            = ヘルプ
#msg.mnu.help.accesskey  = H
msg.mnu.tools           = ツール
#msg.mnu.tools.accesskey = T
# 次の2つは勝手に変更。
msg.mnu.emode           = エラーモード
#msg.mnu.emode.accesskey = E
msg.mnu.tmode           = 例外モード
#msg.mnu.tmode.accesskey = G
msg.mnu.showhide            = 表示/非表示
#msg.mnu.showhide.accesskey  = W
msg.mnu.session.colors           = 対話セッションカラー
#msg.mnu.session.colors.accesskey = L
msg.mnu.scripts.instance           = ファイルオプション
#msg.mnu.scripts.instance.accesskey = I
msg.mnu.scripts.wrapper            = 関数オプション
#msg.mnu.scripts.wrapper.accesskey  = T

msn.sourceheader.url   = <%1$S> %2$S行目
msn.default.alias.help = このコマンドは |%1$S| の別名です。

msn.launch.count      = 起動回数記録 (ローカル: %1$S、グローバル: %2$S)
msg.no.help           = このコマンドの解説は用意されていません。
msn.extra.params      = "余分なパラメータ "%1$S" は無視されました。"
msg.files.rec         = ファイル
#msg.doc.consolehdr   = コンソールコマンド
#msg.doc.menuhdr      = メニュー
#msg.doc.popuphdr     = ポップアップ
#msg.doc.keyhdr       = キー

msg.help.hostproblem  = ブラウザが組み込まれていないアプリケーションで Venkman を実行しているため、ヘルプコンテンツを表示できません。ヘルプコンテンツを表示するには、Firefox, Seamonkey や Flock に Venkman をインストールし、次の URL をアドレスバーに入力してください: x-jsd:help 各コマンドのヘルプ情報については help コマンドにパラメーターを付けて実行すれば表示されます。

msg.note.console     = このコマンドはコンソールから利用できます。
msg.note.noconsole   = このコマンドはコンソールから利用できません。
msg.note.needstack   = このコマンドを使用するにはブレークポイントで停止していなければなりません。
msg.note.nostack     = このコマンドを使用するにはブレークポイントで停止していてはなりません。
msn.doc.commandlabel = "        コマンド名: "%1$S" (%2$S)"
msn.doc.key          = "ショートカットキー: %1$S"
msn.doc.syntax       = "              書式: %1$S %2$S"
msg.doc.notes        = メモ:
msg.doc.description  = 解説:

msn.session.css      = 対話セッションは現在 <%1$S> の CSS を使用しています。
msn.session.title    = 対話セッション [コンテキスト: %1$S, スコープ: %2$S]

msg.source2.help     = 表示するソースファイルを選択してください。
msg.margin.break     = " B "
msg.margin.fbreak    = " F "
msg.margin.breakable = " - "
msg.margin.none      = "   "

msg.bpprops.title    = ブレークポイントのプロパティ
msg.bpprops.enabled  = ブレークポイントを有効にする
msg.fbpprops.title   = 予定ブレークポイントのプロパティ
msg.fbpprops.enabled = 予定ブレークポイントを有効にする

# view captions
msg.view.breaks  = ブレークポイント
msg.view.stack   = コールスタック
msg.view.session = 対話セッション
msg.view.locals  = ローカル変数
msg.view.scripts = 読み込まれているスクリプト
msg.view.windows = 開いているウィンドウ
msg.view.source  = ソースコード
msg.view.source2 = ソースコード
msg.view.watches = 監視点

# settings file return values
msg.breakpoints.restored = ブレークポイントを復帰しました。
msg.watches.restored     = 監視点を復帰しました。
msg.settings.restored    = ブレークポイントと監視点を復帰しました。

###################### DO NO LOCALIZE THE *.params STRINGS ######################
#
# Note also that, for every command, an accesskey may be specified:
#   EITHER by prefixing the desired accesskey with "&" in the .label string,
#   OR     by specifying a .accesskey string, which is useful if the desired
#          accesskey does not occur in the label.
#
# The following are therefore equivalent:
#    cmd.foo.label = &Foo
# and
#    cmd.foo.label = Foo
#    cmd.foo.accesskey = F

## hooks ##

cmd.hook-break-clear.params = <break-wrapper>
cmd.hook-break-clear.help   = ブレークポイントインスタンスが削除されるときに呼び出されます。

cmd.hook-break-set.params = <break-wrapper>
cmd.hook-break-set.help   = ブレークポイントインスタンスが設定されるときに呼び出されます。

cmd.hook-debug-stop.help = デバッガがデバッグ対象の実行を停止するときに呼び出されます。

cmd.hook-debug-continue.help = デバッガがデバッグ対象の実行を再開するときに呼び出されます。

cmd.hook-display-sourcetext.params = <source-text> [<target-line> [<details>]]
cmd.hook-display-sourcetext.help   = ソーステキストオブジェクト <source-text> がユーザに表示されるときに呼び出されます。 <target-line> は画面の最上部あるいはその付近に表示させる行です。 <detail> が指定される場合、それは <source-text> オブジェクトの派生元となるオブジェクトとなります。

cmd.hook-display-sourcetext-soft.params = <source-text> [<target-line> [<details>]]
cmd.hook-display-sourcetext-soft.help   = <target-line> がすでに見えるところにある場合には画面がスクロールされないことを除き、hook-display-sourcetext と同じ関数です。

cmd.hook-eval-done.help = 式が評価されるときに呼び出されます。

cmd.hook-fbreak-clear.params = <fbreak>
cmd.hook-fbreak-clear.help   = ブレークポイントインスタンスが削除されるときに呼び出されます。

cmd.hook-fbreak-set.params = <fbreak>
cmd.hook-fbreak-set.help   = ブレークポイントインスタンスが設定されるときに呼び出されます。

cmd.hook-guess-complete.params = <script-instance>
cmd.hook-guess-complete.help   = スクリプトインスタンス <script-instance> で関数名推測が完了したときに呼び出されます。

cmd.hook-session-display.params = <message> <msgtype>
cmd.hook-session-display.help   = 対話セッション画面にメッセージが追加されるときに呼び出されます。 <message> は文字列か DOM ノードによるメッセージです。 <msgtype> はメッセージの種別コードです。

cmd.hook-script-manager-created.params = <script-manager>
cmd.hook-script-manager-created.help   = スクリプトマネージャが新規作成されたときに呼び出されます。 スクリプトマネージャは一つ以上のスクリプトインスタンスオブジェクトにコマンドを中継します。 <script-manager> が新しいスクリプトマネージャオブジェクトとなります。 スクリプトマネージャは console.scriptManagers オブジェクトに URL をキーとして格納されています。

cmd.hook-script-manager-destroyed.params = <script-manager>
cmd.hook-script-manager-destroyed.help   = console.scriptManagers オブジェクトから <script-manager> が取り除かれた後に呼び出されます。 取り除かれるのは含まれる最後のスクリプトインスタンスが破棄された後です。 

cmd.hook-script-instance-created.params = <script-instance>
cmd.hook-script-instance-created.help   = スクリプトインスタンスが新規作成されたときに呼び出されます。 スクリプトインスタンスは一つ以上のスクリプトラッパーにコマンドを中継します。

cmd.hook-script-instance-sealed.params = <script-instance>
cmd.hook-script-instance-sealed.help = "<script-instance> が確定されたときに呼び出されます。 スクリプトインスタンスは最上位の関数が作られたときに "確定" されます。 これはスクリプトソースが完全にコンパイル完了したということです。 これ以降に生成される非関数スクリプトはすべて、親スクリプトマネージャ中での一時的なものになります。"

cmd.hook-script-callhook-instance-updated.params = <script-instance> <script-wrapper>
cmd.hook-script-callhook-instance-updated.help = callHook から生成された <script-instance> が新しい <script-wrapper> で更新されたときに呼び出されます。 デバッガがアクティブになる前に読み込まれた callHook から生成されたスクリプトは、完全であることは保証されず、絶えず更新されます。

cmd.hook-script-instance-destroyed.params = <script-instance>
cmd.hook-script-instance-destroyed.help   = <script-instance> に含まれる最後のスクリプトラッパーが無効になったときに呼び出されます。

cmd.hook-source-load-complete.params = <sourceText> <status>
cmd.hook-source-load-complete.help   = <sourceText> オブジェクトで表されているソーステキストが読み込み(あるいは再読み込み)されるときに呼び出されます。 <status> は読み込み結果を示します。 <status> は 0 であれば成功、非ゼロ値は失敗を示します。

cmd.hook-transient-script.params = <script-wrapper>
cmd.hook-transient-script.help   = 一時的なスクリプトオブジェクト (eval や setTimeout に因るもの等) が JavaScript エンジンに生成されたときに呼び出されます。 

cmd.hook-window-closed.params = <window>
cmd.hook-window-closed.help   = ウィンドウオブジェクトが破棄されたときに呼び出されます。 <window> はウィンドウの DOM ウィンドウオブジェクトへの参照です。

cmd.hook-window-loaded.params = <event>
cmd.hook-window-loaded.help   = ソースファイルがウィンドウオブジェクトに読み込まれたときに呼び出されます。 <event> はウィンドウの onLoad ハンドラに渡される DOM イベントへの参照です。

cmd.hook-window-opened.params = <window>
cmd.hook-window-opened.help   = 新しくウィンドウオブジェクトが開かれたときに呼び出されます。 このウィンドウのソースがこのときに読み込まれることは、まず*ありません*。 <window> は新ウィンドウの DOM ウィンドウオブジェクトへの参照です。

cmd.hook-window-resized.params = <window>
cmd.hook-window-resized.help   = Venkman メインウィンドウあるいは分離ウィンドウのサイズが変更されるときに呼び出されます。 <window> はウィンドウオブジェクトへの参照となります。

cmd.hook-window-unloaded.params = <event>
cmd.hook-window-unloaded.help   = ウィンドウオブジェクトからソースファイルが取り除かれたときに呼び出されます。 <event> はウィンドウの onUnload ハンドラに渡される DOM イベントへの参照です。

cmd.hook-venkman-exit.help = デバッガを終了する前に呼び出されます。

cmd.hook-venkman-query-exit.help = デバッガが終了しようとするときに呼び出されます。 フック関数はイベントの returnValue に false を設定することで終了をキャンセルできます。

cmd.hook-venkman-started.help = デバッガが最初に起動されるときに呼び出されます。


## commands ##

cmd.about-mozilla.label = Mozilla について
#cmd.about-mozilla.accesskey = A
cmd.about-mozilla.help  = Mozilla インストールに関する情報を表示します。

cmd.break.label  = ブレークポイントを設定
#cmd.break.accesskey = E
cmd.break.params = [<url-pattern> <line-number> [<properties> [<parent>]]]
cmd.break.help   = <url-pattern> にマッチするすべての URL の行番号 <line-number> にブレークポイントを設定します。 <properties> にはブレークポイントのプロパティを表す JavaScript オブジェクト、<parent> には親として対応付ける予定ブレークポイントへの参照を指定します。 パラメータを何も指定しなければすべてのブレークポイント一覧を表示します。  関連コマンド: |set-fbreak|, |clear|

cmd.break-props.label  = ブレークポイントのプロパティ...
#cmd.break-props.accesskey = P
cmd.break-props.params = <break-wrapper>
cmd.break-props.help   = <break-wrapper> で表されるブレークポイントのプロパティダイアログを表示します。

cmd.change-container.params = <view-id> <new-type>
cmd.change-container.help   = "<view-id> が含まれているコンテナの形式を <new-type> に変更します。 <view-id> の値は、"scripts", "windows", "locals", "watches", "breaks", "stack", "source", "source2", "session" のいずれかを指定します。 <new-type> の値は、水平レイアウトにするには "horizontal" を、垂直レイアウトにするには "vertical" を、タブボックスレイアウトにするには "tab" を指定します。"

cmd.change-value.label   = 値を変更...
#cmd.change-value.accesskey = V
cmd.change-value.params  = <jsd-value> <property-name> <expression> [<new-value>]
cmd.change-value.help    = プロパティ <property-name> の値 (これにセットするフルパスは <expression>) を <jsd-value> から <new-value> に変更します。 <new-value> を省略した場合、入力を求められます。

cmd.chrome-filter.params = [<toggle>]
cmd.chrome-filter.help   = chrome: 形式 URL のフィルタリングを有効または無効にします。 chrome: フィルタリングを有効にするとブラウザを構成する JavaScript ファイルはスクリプトビューに表示されなくなり、デバッグ中にそれらのステップ実行はしなくなります。 <toggle> の値は、フラグをオンにするには true, on, yes, 1 のいずれかを、オフにするには false, off, no, 0 のいずれかを、現在の状態を切り替えるには toggle を指定します。 <toggle> を省略した場合、現在の状態が表示されます。

cmd.clear.label  = ブレークポイントを削除
#cmd.clear.accesskey = L
cmd.clear.params = <url-pattern> [<line-number>]
cmd.clear.help   = <url-pattern> にマッチするファイル中のブレークポイントを削除します。 <line-number> を指定すればその行のブレークポイントだけが削除されます。

cmd.clear-all.label  = すべてのブレークポイントを削除
#cmd.clear-all.accesskey = A
cmd.clear-all.help   = 現在定義されているすべてのブレークポイントを削除します。

cmd.clear-break.label  = ブレークポイントを削除
#cmd.clear-break.accesskey = C
cmd.clear-break.params = <break-wrapper> [<...>]
cmd.clear-break.help   = <break-wrapper> で包まれたブレークポイントを削除します。 <break-wrapper> が予定ブレークポイントオブジェクトである場合、すべての子ブレークポイントが削除されますが、予定ブレークポイントは残ります。

cmd.clear-fbreak.label  = 予定ブレークポイントを削除
#cmd.clear-fbreak.accesskey = F
cmd.clear-fbreak.params = <break-wrapper> [<...>]
cmd.clear-fbreak.help   = <break-wrapper> で包まれた予定ブレークポイントを削除します。 <break-wrapper> がブレークポイントインスタンスオブジェクトである場合、インスタンスの親である予定ブレークポイントは削除されますが、インスタンスは残ります。 インスタンスがその親として予定ブレークポイントを持たない場合、当該ラッパーは無視されます。

cmd.clear-profile.label = プロファイルデータを消去
#cmd.clear-profile.accesskey = L
cmd.clear-profile.help  = 存在するあらゆるプロファイルデータをゼロクリアします

cmd.clear-session.label = 対話セッションの出力を消去
#cmd.clear-session.accesskey = A
cmd.clear-session.help  = 対話セッションビューの全テキストを消去します

cmd.clear-script.label  = ブレークポイントを削除
#cmd.clear-script.accesskey = C
cmd.clear-script.params = <script-wrapper> [<...>]
cmd.clear-script.help   = <script-wrapper> で包まれたスクリプト中のすべてのブレークポイントを削除します。

cmd.clear-instance.label  = ブレークポイントを削除
#cmd.clear-instance.accesskey = C
cmd.clear-instance.params = <script-instance> [<...>]
cmd.clear-instance.help   = <script-instance> で表されたスクリプトインスタンス中の全ブレークポイントを削除します。

cmd.close.label = ウィンドウを閉じる
#cmd.close.accesskey = W
cmd.close.help  = デバッガを閉じます

cmd.cmd-docommand.params = <cmd-name>
cmd.cmd-docommand.help   = 

cmd.cmd-undo.label  = 元に戻す
#cmd.cmd-undo.accesskey = U
cmd.cmd-undo.key    = accel Z
cmd.cmd-undo.params = 
cmd.cmd-undo.help   = 最後に行った変更を元に戻します。

cmd.cmd-redo.label  = やり直し
#cmd.cmd-redo.accesskey = R
cmd.cmd-redo.key    = accel Y
cmd.cmd-redo.params = 
cmd.cmd-redo.help   = 最後に元に戻した変更をやり直します。

cmd.cmd-cut.label  = 切り取り
#cmd.cmd-cut.accesskey = T
cmd.cmd-cut.key    = accel X
cmd.cmd-cut.params = 
cmd.cmd-cut.help   = 選択中のテキストをクリップボードにコピーし、ソースから削除します。

cmd.cmd-copy.label  = コピー
#cmd.cmd-copy.accesskey = C
cmd.cmd-copy.key    = accel C
cmd.cmd-copy.params = 
cmd.cmd-copy.help   = 選択中のテキストをクリップボードにコピーします。

cmd.cmd-paste.label  = 貼り付け
#cmd.cmd-paste.accesskey = P
cmd.cmd-paste.key    = accel V
cmd.cmd-paste.params = 
cmd.cmd-paste.help   = クリップボードの内容を貼り付けます。

cmd.cmd-delete.label  = 削除
#cmd.cmd-delete.accesskey = D
cmd.cmd-delete.key    = VK_DELETE
cmd.cmd-delete.params = 
cmd.cmd-delete.help   = 選択範囲を削除します。

cmd.cmd-selectall.label  = すべて選択
#cmd.cmd-selectall.accesskey = A
cmd.cmd-selectall.key    = accel A
cmd.cmd-selectall.params = 
cmd.cmd-selectall.help   = 現在のビューのすべてのテキストを選択します。

cmd.cmd-copy-link-url.label  = リンク URL をコピー
cmd.cmd-copy-link-url.params = <url>
cmd.cmd-copy-link-url.help   = リンクの URL をクリップボードにコピーします。

cmd.cmd-mozilla-prefs.label  = Mozilla の設定...
#cmd.cmd-mozilla-prefs.accesskey = M
cmd.cmd-mozilla-prefs.params = 
cmd.cmd-mozilla-prefs.help   = 

cmd.cmd-prefs.label  = 設定...
#cmd.cmd-prefs.accesskey = E
cmd.cmd-prefs.params = 
cmd.cmd-prefs.help   = 

cmd.cmd-venkman-prefs.label  = JavaScript デバッガの設定...
#cmd.cmd-venkman-prefs.accesskey = E
cmd.cmd-venkman-prefs.params = 
cmd.cmd-venkman-prefs.help   = 

cmd.cmd-venkman-opts.label  = オプション...
#cmd.cmd-venkman-opts.accesskey = O
cmd.cmd-venkman-opts.params = 
cmd.cmd-venkman-opts.help   = 

cmd.commands.params = [<pattern>]
cmd.commands.help   = <pattern> にマッチする名前の全コマンドを一覧表示します。<pattern> が指定されない場合は全コマンド名を表示します。

cmd.copy-frames.label  = 選択フレームをコピー
#cmd.copy-frames.accesskey = C
cmd.copy-frames.params = <jsd-frame> [<...>]
cmd.copy-frames.help   = 選ばれているフレームをクリップボードにコピーします。

cmd.copy-qual-name.label  = 有修飾名をコピー
#cmd.copy-qual-name.accesskey = Q
cmd.copy-qual-name.params = <expression>
cmd.copy-qual-name.help   = 変数の有修飾名をクリップボードにコピーします。

cmd.cont.label = 再開
#cmd.cont.accesskey = C
cmd.cont.key   = VK_F5
cmd.cont.tip   = デバッグを継続
cmd.cont.help  = デバッグ対象の実行を再開します。

cmd.debug-script.label  = デバッグしない
#cmd.debug-script.accesskey = D
cmd.debug-script.params = <toggle> <script-wrapper> [<...>]
cmd.debug-script.help   = <script-wrapper> スクリプトラッパーでのデバッグを有効または無効にします。 デバッグを無効にしている間 Venkman は無効にしたスクリプトでは停止*しません*。 <toggle> の値は、フラグをオンにするには true, on, yes, 1 のいずれかを、オフにするには false, off, no, 0 のいずれかを、現在の状態を切り替えるには toggle を指定します。

cmd.debug-instance-on.label  = 含まれる関数をデバッグしない
#cmd.debug-instance-on.accesskey = D
cmd.debug-instance-on.params = <script-instance> [<...>]
cmd.debug-instance-on.help   = <script-instance> スクリプトインスタンスに含まれる関数すべてのデバッグを無効にします。

cmd.debug-instance-off.label  = 含まれる関数をデバッグする
#cmd.debug-instance-off.accesskey = D
cmd.debug-instance-off.params = <script-instance> [<...>]
cmd.debug-instance-off.help   = <script-instance> スクリプトインスタンスに含まれる関数すべてのデバッグを有効にします。

cmd.debug-instance.label  = 含まれる関数のデバッグを切り替え
#cmd.debug-instance.accesskey = T
cmd.debug-instance.params = <toggle> <script-instance> [<...>]
cmd.debug-instance.help   = <script-instance> スクリプトインスタンスに含まれる関数すべてのデバッグを有効または無効にします。 デバッグを無効にしている間 Venkman は無効にしたスクリプト中では停止*しません*。 <toggle> の値は、フラグをオンにするには true, on, yes, 1 のいずれかを、オフにするには false, off, no, 0 のいずれかを、現在の状態を切り替えるには toggle を指定します。

cmd.debug-transient.label  = Eval/Timeout をデバッグしない
#cmd.debug-transient.accesskey = M
cmd.debug-transient.params = <toggle> <url> [<...>]
cmd.debug-transient.help   = <url> URL に関連づけられた一時的スクリプト(setTimeout() や eval() によるものなど)のデバッグを有効または無効にします。 <toggle> の値は、フラグをオンにするには true, on, yes, 1 のいずれかを、オフにするには false, off, no, 0 のいずれかを、現在の状態を切り替えるには toggle を指定します。

cmd.dumpprofile.label  = プロファイルデータをダンプ
cmd.dumpprofile.params = [<file-name>]

cmd.dumptree.params = <tree> [<depth>]

cmd.emode.params = [<mode>]
cmd.emode.help   = デバッグ対象でエラーが発生したときにデバッガがとる動作を設定します。 emode ignore とすればすべてのエラーを無視し、emode trace とすればコンソールにエラーログを表示し、emode break とすればエラーが投げられたときに実行を停止します。パラメータなしで emode を使用すると現在のエラーモードを表示します。 emode は例外が捉えられなかったときにどうするかを制御するものであり、例外が*投げられた時*の制御には |tmode| を使用することに注意してください。

cmd.eval.params = <expression>
cmd.eval.help   = デバッグ対象の現在のフレームのスコープで <expression> を評価します。 関連コマンド: |frame|, |where|, |props|, |evald|

cmd.evald.params  = <expression>
cmd.evald.help    = デバッガのスコープで <expression> を評価します。  関連コマンド: |eval|

cmd.em-break.label  = エラーで停止
#cmd.em-break.accesskey = R
cmd.em-cycle.label  = エラーモードを切り替え
cmd.em-cycle.key    = accel shift  E
cmd.em-ignore.label = エラーを無視
#cmd.em-ignore.accesskey = N
cmd.em-trace.label  = エラーを追跡
#cmd.em-trace.accesskey = A

cmd.fbreak.label  = 予定ブレークポイントを設定
#cmd.fbreak.accesskey = F
cmd.fbreak.params = [<url-pattern> <line-number> [<properties>]]
cmd.fbreak.help   = ""予定(future)" ブレークポイントを設定します。<url-pattern> にマッチするファイル名のスクリプトが読み込まれたときに <line-number> のブレークポイントが設定されるようになります。 1行目にブレークポイントを設定すればデバッガはスクリプト読み込み時に停止します。 パラメータなしの fbreak は全予定ブレークポイントを一覧表示します。 <properties> にはこのブレークポイントのプロパティを表す JavaScript オブジェクトを指定します。 このコマンドはパラメータを省略できることを除いて |set-fbreak| と同じものです。  関連コマンド: |break|"

cmd.set-break.label  = ブレークポイントを設定
#cmd.set-break.accesskey = E
cmd.set-break.params = <url-pattern> <line-number> [<properties> [<parent>]]
cmd.set-break.help   = <url-pattern> にマッチするすべての URL の行番号 <line-number> にブレークポイントを設定します。 <properties> にはブレークポイントのプロパティを表す JavaScript オブジェクト、<parent> には親として対応付ける予定ブレークポイントへの参照を指定します。 このコマンドはパラメータが必須であることを除いて |break| と同じものです。  関連コマンド: |fbreak|, |clear|

cmd.set-fbreak.label = 予定ブレークポイントを設定
#cmd.set-fbreak.accesskey = F
cmd.set-fbreak.params = <url-pattern> <line-number> [<properties>]
cmd.set-fbreak.help   = ""予定(future)" ブレークポイントを設定します。<url-pattern> にマッチするファイル名のスクリプトが読み込まれたときに <line-number> のブレークポイントが設定されるようになります。 1行目にブレークポイントを設定すればデバッガはスクリプト読み込み時に停止します。 パラメータなしの fbreak では全予定ブレークポイントを一覧表示します。 <properties> にはこのブレークポイントのプロパティを表す JavaScript オブジェクトを指定します。 このコマンドはパラメータを省略できないことを除いて |fbreak| と同じものです。  関連コマンド: |break|"

cmd.fclear.label  = 予定ブレークポイントを削除
#cmd.fclear.accesskey = U
cmd.fclear.params = <url-pattern> [<line-number>]
cmd.fclear.help   = <url-pattern> にセットされた予定ブレークポイントを削除します。 <line-number> を指定するとその行の予定ブレークポイントだけが削除されます。

cmd.fclear-all.label = すべての予定ブレークポイントを削除
#cmd.fclear-all.accesskey = U
cmd.fclear-all.help  = 現在定義されているすべての予定ブレークポイントを削除します。

cmd.find-bp.label  = ブレークポイントを検索
#cmd.find-bp.accesskey = B
cmd.find-bp.params = <breakpoint>
cmd.find-bp.help   = ブレークポイントオブジェクト <breakpoint> で指定されたブレークポイントをフォーカスします。

cmd.find-creator.label  = クリエータを検索
#cmd.find-creator.accesskey = C
cmd.find-creator.params = <jsd-value>
cmd.find-creator.help   = jsdIValue <jsd-value> で参照されたオブジェクトの生成箇所をフォーカスします。

cmd.find-ctor.label  = コンストラクタを検索
#cmd.find-ctor.accesskey = O
cmd.find-ctor.params = <jsd-value>
cmd.find-ctor.help   = jsdIValue <jsd-value> で参照されたオブジェクトのコンストラクタをフォーカスします。

cmd.find-file.label  = ファイルを開く...
#cmd.find-file.accesskey = O
cmd.find-file.key    = accel O
cmd.find-file.params = [<file-name>]
cmd.find-file.help   = <file-name> にあるファイルの内容をスクリプトビューに表示します。 <file-name> の場所は OS のパス文字列で指定します。 <file-name> を指定しないか、文字 '?' を指定した場合、ファイル選択ダイアログが表示されます。

cmd.find-frame.label   = フレームソースを検索
#cmd.find-frame.accesskey = F
cmd.find-frame.params  = <frame-index>
cmd.find-frame.help    = <frame-index> インデックスのフレームで指定されたスタックフレームをフォーカスします。

cmd.find-script.label  = 関数を検索
#cmd.find-script.accesskey = U
cmd.find-script.params = <script-wrapper> [<target-pc>]
cmd.find-script.help   = <script-wrapper> に包まれたスクリプトをフォーカスします。 <target-pc> を指定すれば関連行を表示するためにビューがスクロールされます。

cmd.find-sourcetext.params = <source-text> [<range-start> [<range-end> [<details> [<target-line>]]]]
cmd.find-sourcetext.help   = <source-text> ソーステキストオブジェクトを表示します。 <range-start> と <range-end> との間の全テキストが強調表示されます。 <detail> が指定される場合、それは <source-text> オブジェクトの派生元となるオブジェクトとなります。 <target-line> を指定すればその行にビューがスクロールされますが、指定しなければビューは <range-start> にスクロールされます。

cmd.find-sourcetext-soft.params = <source-text> [<range-start> [<range-end> [<details> [<target-line>]]]]
cmd.find-sourcetext-soft.help   = <target-line> がすでに表示されている場合にはビューがスクロールされないことを除いて |find-sourcetext| と同じ関数です。

cmd.find-string.label = このファイルを検索...
#cmd.find-string.accesskey = D
cmd.find-string.key   = accel F
cmd.find-string.help  = 現在選択されているタブのページ用の "検索ダイアログ" を表示させます。
cmd.find-string-again.key = accel G

cmd.find-scriptinstance.label  = ファイルを検索
#cmd.find-scriptinstance.accesskey = F
cmd.find-scriptinstance.params = <script-instance> [<range-start> [<range-end> [<details> [<target-line>]]]]
cmd.find-scriptinstance.help   = <script-instance> スクリプトインスタンスに関連づけられたソーステキストを表示します。 <range-start> と <range-end> との間の全テキストが強調表示されます。 <detail> が指定される場合、それは <script-instance> オブジェクトの派生元となるオブジェクトとなります。 <target-line> を指定すればその行にビューがスクロールされますが、指定しなければビューは <range-start> にスクロールされます。

cmd.find-url.label  = URL を検索
#cmd.find-url.accesskey = F
cmd.find-url.params = <url> [<range-start> [<range-end> [<details> [<target-line>]]]]
cmd.find-url.help   = <url> URLのコンテンツをソースビューに表示します。 <range-start> と <range-end> との間の全テキストが強調表示されます。 <detail> が指定される場合、それは <url> オブジェクトの派生元となるオブジェクトとなります。 <target-line> を指定すればその行にビューがスクロールされますが、指定しなければビューは <range-start> にスクロールされます。

cmd.find-url-soft.label  = URL をソフトフォーカス
#cmd.find-url-soft.accesskey = S
cmd.find-url-soft.params = <url> [<range-start> [<range-end> [<details> [<target-line>]]]]
cmd.find-url-soft.help   = <target-line> がすでに表示されている場合にはビューがスクロールされないことを除いて |find-url| と同じ関数です。

cmd.finish.label = ステップアウト
#cmd.finish.accesskey = T
cmd.finish.key   = shift VK_F11
cmd.finish.tip   = 現在の関数から出るまで実行
cmd.finish.help  = 処理中の関数から出て現在のスタックフレームが返されるまで一度に実行します。

cmd.focus-input.key  = VK_ESCAPE
cmd.focus-input.help = コンソールの入力フィールドにフォーカスを移します。

cmd.frame.label  = 現在のフレームを設定
#cmd.frame.accesskey = C
cmd.frame.params = [<frame-index>]
cmd.frame.help   = 現在のフレームにフレーム番号 <frame-index> を設定し、フレーム一覧を表示します。 <frame-index> が指定されない場合現在のフレーム一覧が表示されます。 有効なフレームとフレーム番号の一覧表示するには |where| コマンドを使用してください。

cmd.gc.help = JavaScript のガーベジコレクションを今すぐ行います。 このコマンドにより、すでに解放されたスクリプトを読み込まれているスクリプトビューから除去できます。

cmd.help.label  = コマンドリファレンス
#cmd.help.accesskey = C
cmd.help.params = [<pattern>]
cmd.help.help    = <pattern> のヘルプを表示します。 <pattern> にはコマンド名全体か、コマンド名の最初の数文字だけを指定できます。 <pattern> がひとつ以上のコマンドにマッチする場合、マッチするコマンドすべてのヘルプが表示されます。 <patten> を指定しなければブラウザビューにコマンドリファレンスが読み込まれます。

cmd.inspect.label  = DOM インスペクタで調査
#cmd.inspect.accesskey = I
cmd.inspect.params = [<expression>]
cmd.inspect.help   = <expression> の結果を DOM インスペクタで調査します。

cmd.loadd.label  = デバッガスコープにスクリプトを読み込む
cmd.loadd.params = <url>
cmd.loadd.help   = デバッガのコンテキストに於いて <url> で指定した URL の中身を実行します。 デバッガプラグインの読み込みに使えます。  関連コマンド: |pref| (initialScripts 環境設定)

cmd.move-view.params = <view-id> <location-url>
cmd.move-view.help   = <view-id> に関連づけられたビューを <location-url> で指定されたロケーションに移動します。

cmd.mozilla-help.label = ヘルプ 目次
#cmd.mozilla-help.accesskey = H
cmd.mozilla-help.help  = Mozilla ヘルプの目次を表示します。

cmd.next.label = ステップオーバー
#cmd.next.accesskey = O
cmd.next.key   = VK_F12
cmd.next.tip   = 関数呼び出しも含めて一行ずつ実行
cmd.next.help  = スクリプトの次の行を実行します。 当該行に関数呼び出しが含まれている場合でも、呼び出し先関数の処理も含めて、コード行単位で一行ずつ実行します。

cmd.open-dialog.params = <url> [<window-name> [<window-flags>]]
cmd.open-dialog.help   = ダイアログウィンドウを開いて <url> からソースを読み込みます。 chrome: ではなく Web ページを読み込むのに使用することもできますが、主として新しい XUL ウィンドウを開くのに使用されます。

cmd.open-url.label = URL を指定して開く...
#cmd.open-url.accesskey = L
cmd.open-url.key   = accel shift L
cmd.open-url.help  = ソースビューに読み込む URL をユーザに尋ねます。

cmd.pprint.params = [<toggle>]
cmd.pprint.help   = 整形表示モードを設定や表示します。 <toggle> の値は、フラグをオンにするには true, on, yes, 1 のいずれかを、オフにするには false, off, no, 0 のいずれかを、現在の状態を切り替えるには toggle を指定します。 <toggle> を省略した場合、現在の状態が表示されます。

cmd.pref.params  = [<pref-name> [<pref-value> [<delete-pref>]]]
cmd.pref.help    = <pref-name> という名前の環境設定値を <pref-value> の値に設定します。 <pref-value> を指定しなければ <pref-name> の現在値が表示されます。 <pref-name> と <pref-value> の両方を省略すればすべての環境設定が表示されます。 true, on, yes, 1 のいずれかを <delete-pref> に指定するか <pref-name> がマイナス文字('-')で始まる場合、環境設定にはその初期値が復元されます。

cmd.profile.params = [<toggle>]
cmd.profile.help   = プロファイルデータの収集を有効または無効にします。 <toggle> の値は、フラグをオンにするには true, on, yes, 1 のいずれかを、オフにするには false, off, no, 0 のいずれかを、現在の状態を切り替えるには toggle を指定します。 <toggle> を省略した場合、現在の状態が表示されます。

cmd.profile-script.label   = プロファイルしない
#cmd.profile-script.accesskey = P
# チェック表示があるので"\u301cしない"と否定形
cmd.profile-script.params = <toggle> <script-wrapper> [<...>]
cmd.profile-script.help   = <script-wrapper> スクリプトのプロファイルを有効または無効にします。 プロファイルが無効になっている間、データは破棄されます。 <toggle> の値は、フラグをオンにするには true, on, yes, 1 のいずれかを、オフにするには false, off, no, 0 のいずれかを、現在の状態を切り替えるには toggle を指定します。 <toggle> を省略した場合、現在の状態が表示されます。

cmd.profile-instance.label = 含まれる関数のプロファイル切り替え
#cmd.profile-instance.accesskey = G
cmd.profile-instance.params = <toggle> <script-instance> [<...>]
cmd.profile-instance.help   = <script-instance> スクリプトインスタンスに含まれる全関数のプロファイルを有効または無効にします。 プロファイルが無効になっている間、データは破棄されます。 <toggle> の値は、フラグをオンにするには true, on, yes, 1 のいずれかを、オフにするには false, off, no, 0 のいずれかを、現在の状態を切り替えるには toggle を指定します。

cmd.profile-instance-on.label  = 含まれる関数をプロファイルしない
#cmd.profile-instance-on.accesskey = P
cmd.profile-instance-on.params = <script-instance> [<...>]
cmd.profile-instance-on.help   = <script-instance> スクリプトインスタンスに含まれる全関数のプロファイルを無効にします。

cmd.profile-instance-off.label  = 含まれる関数をプロファイルする
#cmd.profile-instance-off.accesskey = C
cmd.profile-instance-off.params = <script-instance> [<...>]
cmd.profile-instance-off.help   = <script-instance> スクリプトインスタンスに含まれる全関数のプロファイルを有効にします。

cmd.profile-tb.label = プロファイル
cmd.profile-tb.tip   = プロファイルモードを切り替え

cmd.props.params = <expression>
cmd.props.help   = <expression> によって返される値のプロパティを一覧表示します。 式の評価はデバッグ対象の現在フレームのスコープで行われます。  関連コマンド: |where|, |frame|, |eval|, |propsd|

cmd.propsd.params = <expression>
cmd.propsd.help   = <expression> によって返される値のプロパティを一覧表示します。式の評価はデバッガのスコープで行われます。  関連コマンド: |props|

cmd.exit.label = 終了
#cmd.exit.accesskey = E
cmd.exit.key   = accel Q

cmd.quit.label = 終了
#cmd.quit.accesskey = Q
cmd.quit.key   = accel Q
cmd.quit.help  = Mozilla を終了します。

cmd.reload-source-tab.label  = ソースを再読み込み
#cmd.reload-source-tab.accesskey = R
cmd.reload-source-tab.params = [<index>]
cmd.reload-source-tab.key    = accel R
cmd.reload-source-tab.help   = <index> で指定したインデックスのタブでソースを再読み込みします。 <index> を指定しなければ現在のタブが再読み込みされます。

cmd.release-notes.label = リリースノート
#cmd.release-notes.accesskey = R
cmd.release-notes.help  = Mozilla のリリースノートを表示します。

cmd.close-source-tab.label  = タブを閉じる
#cmd.close-source-tab.accesskey = C
cmd.close-source-tab.key    = accel W
cmd.close-source-tab.params = [<index>]
cmd.close-source-tab.help   = <index> で指定したインデックスのタブを閉じます。 <index> を指定しなければ現在のタブが閉じられます。

cmd.restore-layout.params = [<name>]
cmd.restore-layout.help   = <name> と名付けたビューレイアウトを復元します。 <name> を指定しなければ利用可能なレイアウト一覧が表示されます。 特殊な名前 factory をデフォルトレイアウトの復元に使用できます。

cmd.restore-settings.label  = ブレークポイントと監視点の設定を復帰...
#cmd.restore-settings.accesskey = T
cmd.restore-settings.params = [<settings-file>]
cmd.restore-settings.help   = このコマンドは実際には <settings-file> を省略できることだけが異なる |loadd| の別名です。 <settings-file> を指定しないか文字 '?' を指定した場合、ファイル選択ウィジェットが表示されます。 このコマンドは保存したブレークポイントと監視点を手軽に復帰できるようにブレークポイント及び監視点ビューのコンテキストメニューに用意されます。

cmd.reloadui.key = accel alt R

cmd.run-to.label  = 指定行まで実行
#cmd.run-to.accesskey = L
cmd.run-to.params = <script-wrapper> <pc>
cmd.run-to.help   = "<script-wrapper> で指定したスクリプトの <pc> で指定したプログラムカウンタ に達するまで実行を続けます。 これは当該行に対して "使い捨て" ブレークポイントを設定する効果があります。

cmd.save-default-layout.label = デフォルトレイアウトに設定
#cmd.save-default-layout.accesskey = S

cmd.save-layout.params = [<name>]
cmd.save-layout.help   = "<name> という名前で現在のウィンドウレイアウトを保存します。 保存したレイアウトは後で |restore-layout| コマンドにより復元できます。 <name> を指定しなければ利用可能なレイアウト一覧が表示されます。 Venkman が起動時に復元するデフォルトレイアウトに設定するには "default" という名前で保存します。 "factory" レイアウトは上書きできません。"

cmd.save-source-tab.label = 名前を付けてソースファイルを保存...
#cmd.save-source-tab.accesskey = S
cmd.save-source-tab.params = [<index> [<target-file>]]
cmd.save-source-tab.key   = accel S
cmd.save-source-tab.help  = <index> で指定した位置のタブに表示されているソースファイルの中身をローカルシステムのファイルに保存します。 <index> を指定しなければ現在のタブが保存されます。 <target-file> を指定しないか、文字 '?' を指定した場合、ファイル選択ダイアログが表示されます。 <target-file> は OS のパス文字列で指定します。

cmd.save-profile.label = 名前を付けてプロファイルデータを保存...
#cmd.save-profile.accesskey = R
cmd.save-profile.params = [<target-file> [<url> [<...>]]
cmd.save-profile.help = <url> で指定した一つ以上のソースファイルで集められたプロファイルデータを <target-file> に保存します。 <target-file> を指定しないか、文字 '?' を指定した場合、ファイル選択ダイアログが表示されます。 <url> を指定しなければすべてのプロファイルデータが保存されます。 <target-file> は OS のパス文字列で指定し、<url> は絶対 URL で指定します。

cmd.save-breakpoints.label  = ブレークポイントの設定を保存...
#cmd.save-breakpoints.accesskey = S
cmd.save-breakpoints.params = [<settings-file>]
cmd.save-breakpoints.help   = 後で復帰できるように現在のブレークポイントの一覧を JavaScript ファイルに保存します。 <settings-file> を指定しないか文字 '?' を指定した場合、ファイル選択ウィジェットが表示されます。 <settings-file> は |LocalFile| オブジェクトへの参照であってもネイティブパスを文字列で表したものであっても構いません。  関連コマンド: |save-settings|, |save-watches|, |restore-settings|

cmd.save-settings.label  = ブレークポイントと監視点の設定を保存...
#cmd.save-settings.accesskey = V
cmd.save-settings.params = [<settings-file>]
cmd.save-settings.help   = 後で復帰できるように現在のブレークポイントと監視点の一覧を JavaScript ファイルに保存します。 <settings-file> を指定しないか文字 '?' を指定した場合、ファイル選択ウィジェットが表示されます。 <settings-file> は |LocalFile| オブジェクトへの参照であってもネイティブパスを文字列で表したものであっても構いません。  関連コマンド: |save-watches|, |save-breakpoints|, |restore-settings|

cmd.save-watches.label  = 監視点の設定を保存...
#cmd.save-watches.accesskey = S
cmd.save-watches.params = [<settings-file>]
cmd.save-watches.help   = 後で復帰できるように現在の監視点の一覧を JavaScript ファイルに保存します。 <settings-file> を指定しないか文字 '?' を指定した場合、ファイル選択ウィジェットが表示されます。 <settings-file> は |LocalFile| オブジェクトへの参照であってもネイティブパスを文字列で表したものであっても構いません。  関連コマンド: |save-settings|, |save-breakpoints|, |restore-settings|

cmd.search-scripts.params = [<pattern>]
cmd.search-scripts.help   = URL が <pattern> にマッチしないスクリプトをすべて 読み込まれているスクリプトビュー から除外します。 <pattern> が指定されなければすべてのスクリプトが表示されます。

cmd.session-css.params = [<css>]
cmd.session-css.help   = 現在の CSS ファイルを対話セッションで使用するよう設定します。 <css> の値には "default", "dark", "light" あるいは使用する CSS ファイルの url が指定できます。 "default" ではブラウザの文字列及び背景色のデフォルト値を使用し、"dark" では暗い背景に明るい文字、"light" では明るい背景に暗い文字を使用します。 <css> を指定しなければ現在の値が表示されます。

cmd.session-css-default.label = ブラウザ標準
#cmd.session-css-default.accesskey = B
cmd.session-css-dark.label    = 暗い背景に明るい文字
#cmd.session-css-dark.accesskey= D
cmd.session-css-light.label   = 明るい背景に暗い文字
#cmd.session-css-light.accesskey = L

cmd.set-eval-obj.label  = 評価オブジェクトに設定
#cmd.set-eval-obj.accesskey = E
cmd.set-eval-obj.params = <jsd-value>
cmd.set-eval-obj.help   = "eval コマンドで使用される現在の "評価オブジェクト" を設定します。 <jsd-value> で参照されるオブジェクトが this オブジェクトとなり、グローバル変数は <jsd-value> の親に関して解決されます。"

cmd.scan-source.label  = メタコメントをスキャン
#cmd.scan-source.accesskey = S
cmd.scan-source.params = <script-instance>
cmd.scan-source.help   = ソースファイル全体から //@JSD_DIRECTIVE 形式のコメントをスキャンします。 初期状態で認識される命令は //@JSD_LOG, //@JSD_BREAK, //@JSD_EVAL です。 JSD_LOG はそれに続く任意のスクリプトを評価し、その結果を対話セッションビューに記録します。 JSD_BREAK は次の実行可能行に条件付きブレークポイントを挿入します。 JSD_EVAL はそれに続く任意のスクリプト記録や停止を伴わずに実行します。 ユーザはプラグインによって他の命令を追加することができます。

cmd.scope.help = 現在フレームのスコープチェーン最上位オブジェクトのプロパティを一覧表示します。

cmd.toggle-forcescriptload.label = 常に関数名推測を使用する
#cmd.toggle-forcescriptload.accesskey = F

cmd.toggle-functions.label  = 関数を含める
#cmd.toggle-functions.accesskey = F

cmd.show-functions.params = [<toggle>]
cmd.show-functions.help   = 関数プロパティ(メソッドとして参照されていることもある)をローカル変数ビューと監視点ビューに表示するかどうか設定します。 設定変更後にノードを一度閉じて再度開いたときに、変更が反映されます。 <toggle> の値は、フラグをオンにするには true, on, yes, 1 のいずれかを、オフにするには false, off, no, 0 のいずれかを、現在の状態を切り替えるには toggle を指定します。 <toggle> を省略した場合、現在の状態が表示されます。

cmd.toggle-ecmas.label  = ECMAプロパティを含める
#cmd.toggle-ecmas.accesskey = I

cmd.show-ecmas.params = [<toggle>]
cmd.show-ecmas.help   = ECMA の [[Parent]] 及び [[Prototype]] プロパティをローカル変数ビューと監視点ビューに表示するかどうか設定します。 設定変更後にノードを一度閉じて再度開いたときに、変更が反映されます。 <toggle> の値は、フラグをオンにするには true, on, yes, 1 のいずれかを、オフにするには false, off, no, 0 のいずれかを、現在の状態を切り替えるには toggle を指定します。 <toggle> を省略した場合、現在の状態が表示されます。

cmd.toggle-constants.label  = 定数を含める
#cmd.toggle-constants.accesskey = T

cmd.show-constants.params = [<toggle>]
cmd.show-constants.help   = 定数プロパティをローカル変数ビューと監視点ビューに表示するかどうか設定します。 設定変更後にノードを一度閉じて再度開いたときに、変更が反映されます。 <toggle> の値は、フラグをオンにするには true, on, yes, 1 のいずれかを、オフにするには false, off, no, 0 のいずれかを、現在の状態を切り替えるには toggle を指定します。 <toggle> を省略した場合、現在の状態が表示されます。

cmd.toggle-show-most-recent.label = 同一ファイルを除外
#cmd.toggle-show-most-recent.accesskey = X

cmd.show-most-recent.params = [<toggle>]
cmd.show-most-recent.help   = 読み込まれているスクリプトビューに、特定 URL のスクリプトのうち最新のものだけを表示するか、あるいはすべてを表示するか設定します。これをオフにすると同一項目であっても 読み込まれているスクリプトビュー に表示されます。 <toggle> の値は、フラグをオンにするには true, on, yes, 1 のいずれかを、オフにするには false, off, no, 0 のいずれかを、現在の状態を切り替えるには toggle を指定します。 <toggle> を省略した場合、現在の状態が表示されます。

cmd.show-profile.label = プロファイルデータを表示
#cmd.show-profile.accesskey = D
cmd.show-profile.params = [<url> [<...>]]
cmd.show-profile.help = 1 つ以上の <url> で指定されたソースファイルのプロファイルデータを表示します。<url> を指定しなければ、すべてのプロファイルデータが表示されます。

cmd.startup-init.label  = 起動時に初期化
#cmd.startup-init.accesskey = S
cmd.startup-init.params = [<toggle>]
cmd.startup-init.help   = [起動時に初期化] 機能の状態を設定します。 この機能を有効にすると、ユーザインターフェイスが起動されるまで待たずに、デバッガはブラウザが最初に起動したときにスクリプト追跡を始めます。 これによりスクリプト一覧にデバッガユーザインターフェイスを起動する前に読み込まれたファイルを表示することができます。 この機能はパフォーマンスを*僅かに*低下させます。 <toggle> の値は、フラグをオンにするには true, on, yes, 1 のいずれかを、オフにするには false, off, no, 0 のいずれかを、現在の状態を切り替えるには toggle を指定します。 <toggle> を省略した場合、現在の状態が表示されます。

cmd.source-coloring.label  = ソースのカラー表示
#cmd.source-coloring.accesskey = Z
cmd.source-coloring.params = [<toggle>]
cmd.source-coloring.help   = ソースコードビューでのソースコードカラー表示機能を有効または無効にします。 大きなファイルを扱うときや遅いマシンではソースのカラー表示を行うには時間がかかりすぎるかもしれません。 ソースのカラー表示をオフにすればファイル読み込みがかなり速くなります。 この設定の変更を反映するにはソースコードを再読み込みする必要があります。 <toggle> を省略した場合、現在の状態が表示されます。

cmd.stop.label = 停止
#cmd.stop.accesskey = P
cmd.stop.key   = VK_F4
cmd.stop.tip   = 現在の操作を停止
cmd.stop.help  = コードの次の行が実行される前に停止します。

cmd.step.label = ステップイン
#cmd.step.accesskey = I
cmd.step.key   = VK_F11
cmd.step.tip   = 関数内部に入って一行ずつ実行
cmd.step.help  = スクリプトの次の行を実行して停止します。 当該行に関数呼び出しが含まれている場合、その関数内部に移って、呼び出し先関数の処理を一行ずつ実行します。

cmd.testargs.params = <int> <word> [<word2> <word3>]
cmd.testargs.help   = 引数のパースをテストする関数です。 任意の引数を通過させ、標準出力にイベントオブジェクトを出力します。
# Functionは関数ではなく機能とかコマンドとしたほうがよい？

cmd.testargs1.params = <int> [<...>]
cmd.testargs1.help   = 引数のパースをテストする関数です。 任意の引数を通過させ、標準出力にイベントオブジェクトを出力します。

cmd.this-expr.params = <expression>
cmd.this-expr.help   = ""評価オブジェクト" を <expression> の結果に設定します。 すべての評価に於いて評価オブジェクトは this オブジェクトとして使用されます。 <expression> の結果は*絶対に*オブジェクトとならねばなりません。  関連コマンド: |eval|, |props|, |watch-expr|, |set-eval-obj|"

cmd.tmode.params = [<mode>]
cmd.tmode.help   = デバッグ対象で例外が投げられたときにデバッガがとる動作を設定します。 tmode ignore とすればすべての例外を無視し、tmode trace とすればコンソールにエラーログを表示し、tmode break とすれば例外が投げられたときに実行を中断します。 パラメータなしで tmode を実行すると現在の例外モードを表示します。 tmode は例外が*投げられた時*にどうするかを制御するものであり、例外が最上位まで達してエラーとなった時の制御には |emode| を使用することに注意してください。 Ctrl + T キーで例外モードを切り替えることができます。

cmd.tm-break.label  = 例外で停止
#cmd.tm-break.accesskey = E
cmd.tm-cycle.label  = 例外モードを切り替え
cmd.tm-cycle.key    = accel T
cmd.tm-ignore.label = 例外を無視
#cmd.tm-ignore.accesskey = G
cmd.tm-trace.label  = 例外を追跡
#cmd.tm-trace.accesskey = R

cmd.toggle-scripts-search-box.help   = 読み込まれているスクリプトビューにある検索ボックスの表示を切り替えます。

cmd.toggle-float.params = <view-id>
cmd.toggle-float.help   = <view-id> で指定したビューが現在メインウィンドウに表示されているか、非表示になっている場合、新しい分離ウィンドウに表示します。 <view-id> がすでに分離ウィンドウである場合、メインウィンドウ中に戻されます。

cmd.toggle-pprint.label = 整形表示
#cmd.toggle-pprint.accesskey = P
cmd.toggle-pprint.key   = accel P
cmd.toggle-pprint.tip   = 整形表示モードを切り替え
cmd.toggle-pprint.help  = 整形表示モードを切り替えます。

cmd.toggle-save-layout.label = 終了時にレイアウトを保存
#cmd.toggle-save-layout.accesskey = E
cmd.toggle-save-layout.help  = 設定すると Venkman 終了時にウィンドウレイアウトを保存します。

cmd.toggle-save-settings.label = 終了時にブレークポイントと監視点の設定を保存
#cmd.toggle-save-settings.accesskey = X
cmd.toggle-save-settings.help  = 設定すると Venkman 終了時にブレークポイントと監視点の設定を Venkman 保存し、起動時に復帰します。

cmd.toggle-pref.params = <pref-name>
cmd.toggle-pref.help   = <pref-name> で指定した真偽値環境設定を切り替えます。

cmd.toggle-view.params = <view-id>
cmd.toggle-view.help   = <view-id> で指定したビューが現在表示されている場合は非表示にします。 表示されていない場合は最後に表示されていた場所に表示されます。

cmd.toggle-chrome.label  = アプリケーションファイルを除外
#cmd.toggle-chrome.accesskey = X
cmd.toggle-profile.label = プロファイルデータ収集
#cmd.toggle-profile.accesskey = C

cmd.toggle-breaks.label  = ブレークポイント
#cmd.toggle-breaks.accesskey = B
cmd.toggle-stack.label   = コールスタック
#cmd.toggle-stack.accesskey = C
cmd.toggle-session.label = 対話セッション
#cmd.toggle-session.accesskey = I
cmd.toggle-locals.label  = ローカル変数
#cmd.toggle-locals.accesskey = L
cmd.toggle-scripts.label = 読み込まれているスクリプト
#cmd.toggle-scripts.accesskey = C
cmd.toggle-windows.label = 開いているウィンドウ
#cmd.toggle-windows.accesskey = O
cmd.toggle-source.label  = 旧型ソースコード
cmd.toggle-source2.label = ソースコード
#cmd.toggle-source2.accesskey = U
cmd.toggle-watches.label = 監視点
#cmd.toggle-watches.accesskey = W

cmd.version.label = デバッガについて
#cmd.version.accesskey = V
cmd.version.help  = バージョン情報を表示

cmd.remove-watch.label  = 監視点を削除
#cmd.remove-watch.accesskey = R
cmd.remove-watch.params = <index> [<...>]
cmd.remove-watch.help   = 0 から始まるインデックス <index> で指定した監視点を削除します。

cmd.watch-expr.label  = 監視する式を追加...
#cmd.watch-expr.accesskey = W
cmd.watch-expr.params = [<watch-expression>]
cmd.watch-expr.help   = デバッグ対象のスコープで <expression> を評価し、監視点ウィンドウに結果を追加します。 <expression> を指定しなければコンソールにすべての監視点を表示します。

cmd.watch-exprd.params = [<watch-expression>]
cmd.watch-exprd.help   = デバッガのスコープで <expression> を評価し、監視点ウィンドウに結果を追加します。 <expression> を指定しなければコンソールにすべての監視点を表示します。

cmd.watch-property.params = <jsd-value> <property-name>
cmd.watch-property.help   = <jsd-value> に格納されているオブジェクトの <property-name> という名前のプロパティを監視点ウィンドウに追加します。

cmd.where.label = 対話セッションにスタックをダンプ
#cmd.where.accesskey = S
cmd.where.help = 現在のコールチェーンの簡潔なスタックフレーム一覧を表示します。
